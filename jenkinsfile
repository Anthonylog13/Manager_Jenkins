pipeline {
    agent any // Tu agente Windows

    environment {
        AWS_REGION         = 'us-east-2'
        ECR_PUBLIC_REGION  = 'us-east-1' 
        ECR_PUBLIC_ALIAS   = 'e5f4p9e5'          // ¡CAMBIA ESTO POR TU ALIAS REAL!
        BACKEND_DIR        = "AlfaByte_Xclone-"
        FRONTEND_DIR       = "Frontend"
        BACKEND_REPO_NAME  = 'alfabyte-xclone-backend'
        FRONTEND_REPO_NAME = 'alfabyte-xclone-frontend'
        EC2_IP             = '3.15.177.89'       // ¡LA IP PÚBLICA DE TU EC2!
        // --- IDs de Credenciales Jenkins ---
        AWS_CREDS_ID       = 'aws-manageJenkins' 
        SSH_KEY_ID         = 'xclone-key-ssh' 
        JWT_SECRET_ID      = 'jwt-secret-id' 
        MONGO_PW_ID        = 'mongo-pw-id' 
    }

    stages {
        stage('Clonar Repositorio') {
            steps {
                echo "==> Clonando repositorio..."
                checkout scm
            }
        }

        stage('Login ECR Público') {
            steps {
                echo "==> Haciendo login en ECR Público usando PowerShell..."
                withAWS(credentials: AWS_CREDS_ID, region: ECR_PUBLIC_REGION) {
                    script {
                        // ¡AJUSTA ESTA RUTA SI TU AWS CLI ESTÁ EN OTRO LADO EN WINDOWS!
                        def awsCliFullPath = 'C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe' 
                        
                        def psLoginScript = """
                            Write-Output "Paso 1: Obteniendo token de ECR..."
                            # Ejecuta el comando y captura la salida cruda
                            \$rawTokenOutput = & \"${awsCliFullPath}\" ecr-public get-login-password --region \"${ECR_PUBLIC_REGION}\"
                            
                            # Limpia el token: quita espacios/saltos de línea al principio/final
                            \$ecrPassword = \$rawTokenOutput.Trim()

                            if (!\$ecrPassword -or \$ecrPassword.Length -lt 100) { // Un token válido es mucho más largo que 100
                                Write-Error "No se obtuvo un token válido de AWS ECR. Salida: '\$rawTokenOutput'"
                                exit 1 
                            }
                            Write-Output "Token ECR obtenido (longitud: \$(\$ecrPassword.Length))."
                            
                            Write-Output "Paso 2: Intentando hacer login en Docker..."
                            # Establecemos la contraseña como una variable de entorno temporal
                            \$env:DOCKER_PASSWORD = \$ecrPassword
                            
                            # Intentamos el login
                            docker login --username AWS --password-stdin "public.ecr.aws/${ECR_PUBLIC_ALIAS}"
                            
                            # Limpiamos la variable de entorno
                            Remove-Item Env:DOCKER_PASSWORD

                            if (\$LASTEXITCODE -ne 0) {
                                Write-Error "Docker login falló con código de salida: \$LASTEXITCODE"
                                exit 1
                            }
                            Write-Output "Login de Docker aparentemente completado."
                        """
                        
                        try {
                            powershell(script: psLoginScript)
                            echo "Stage de Login ECR Público completado con éxito."
                        } catch (e) {
                            echo "EXCEPCIÓN al ejecutar PowerShell para login ECR: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }

        stage('Build & Push Backend') {
            steps {
                echo "==> Construyendo y subiendo imagen de backend..."
                script {
                    env.BACKEND_IMAGE_URL = "public.ecr.aws/${ECR_PUBLIC_ALIAS}/${BACKEND_REPO_NAME}:${env.BUILD_NUMBER}"
                    dir(BACKEND_DIR) {
                        bat "docker build -t ${env.BACKEND_IMAGE_URL} ."
                        bat "docker push ${env.BACKEND_IMAGE_URL}"
                    }
                }
            }
        }

        stage('Build & Push Frontend') {
            steps {
                echo "==> Construyendo y subiendo imagen de frontend..."
                 script {
                    env.FRONTEND_IMAGE_URL = "public.ecr.aws/${ECR_PUBLIC_ALIAS}/${FRONTEND_REPO_NAME}:${env.BUILD_NUMBER}"
                    dir(FRONTEND_DIR) {
                        bat "docker build -t ${env.FRONTEND_IMAGE_URL} ."
                        bat "docker push ${env.FRONTEND_IMAGE_URL}"
                    }
                }
            }
        }

        stage('Desplegar en AWS EC2') {
            steps {
                echo "==> Desplegando en EC2..."
                withCredentials([
                    sshUserPrivateKey(credentialsId: SSH_KEY_ID, keyFileVariable: 'SSH_KEY_FILE'),
                    string(credentialsId: JWT_SECRET_ID, variable: 'JWT_SECRET_VALUE'),
                    string(credentialsId: MONGO_PW_ID, variable: 'MONGO_PASSWORD_VALUE')
                ]) {
                    bat """
                        ssh -o StrictHostKeyChecking=no -i %SSH_KEY_FILE% ec2-user@${EC2_IP} ^
                        "echo '==> Conectado a EC2. Preparando despliegue...'; ^
                        export BACKEND_IMAGE_URL='${env.BACKEND_IMAGE_URL}'; ^
                        export FRONTEND_IMAGE_URL='${env.FRONTEND_IMAGE_URL}'; ^
                        export APP_PORT='3000'; ^
                        export MONGO_ATLAS='mongodb+srv://anthonyarango01:${MONGO_PASSWORD_VALUE}@databasesx.silq0.mongodb.net/'; ^
                        export DB_NAME='databasesx'; ^
                        export MONGO_ATLAS_DB_USER='anthonyarango01'; ^
                        export MONGO_ATLAS_DB_PASSWORD='${MONGO_PASSWORD_VALUE}'; ^
                        export JWT_SECRET='${JWT_SECRET_VALUE}'; ^
                        
                        echo '==> Haciendo login en ECR Público...'; ^
                        aws ecr-public get-login-password --region ${ECR_PUBLIC_REGION} | docker login --username AWS --password-stdin public.ecr.aws/${ECR_PUBLIC_ALIAS}; ^

                        echo '==> Descargando imágenes...'; ^
                        docker pull \$BACKEND_IMAGE_URL; ^
                        docker pull \$FRONTEND_IMAGE_URL; ^
                        
                        echo '==> Ejecutando docker-compose...'; ^
                        mkdir -p /home/ec2-user/app; ^
                        cd /home/ec2-user/app; ^
                        # ¡CAMBIA ESTO POR LA URL DE TU REPOSITORIO REAL!
                        git pull https://github.com/Anthonylog13/Manager_Jenkins.git; ^ 
                        
                        docker-compose -f docker-compose.prod.yml up -d --remove-orphans; ^

                        echo '==> Limpiando imágenes antiguas (opcional)...'; ^
                        docker image prune -f; ^

                        echo '==> ¡Despliegue completado! ✅';"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline ejecutado con éxito."
        }
        failure {
            echo "Falló el pipeline."
        }
    }
}